/*
* Semantic clone benchmark
*  Source code are extracted from Stack Overflow
*  Stack overflow Question #:43505815
*  Stack Overflow answer #:43507441
*  And Stack Overflow answer#:43511143
*/
int main () {
    char *args [2] = {"DD", NULL};
    int D, waitVal3, waitVal4, rc, waitStatus;
    D = fork ();
    if (D == -1) {
        printf ("fork failed\n");
        exit (1);
    }
    if (D == 0) {
        rc = execv ("/some/path/to/DD", args);
        printf ("execv failed: errno: %d\n", errno);
        exit (1);
    }
    if (D != 0) {
        printf ("\nPid = %d Code AA: created proccess Pid = %d (code DD)\n", getpid (), D);
    }
    waitVal4 = wait (&waitStatus);
    waitVal3 = (waitVal4);
    printf ("WAIT VAL: %d", waitVal3);
    if (waitVal3 == D) {
        printf ("\nPid = %d Code AA: process Pid = %d terminated\n", getpid (), D);
    }
    return 0;
}

int main () {
    char *args [2] = {"DD", NULL};
    int waitVal3, waitVal4, rc, waitStatus;
    pid_t D;
    D = fork ();
    if (D == -1) {
        printf ("fork failed\n");
        exit (1);
    }
    if (D == 0) {
        if (execv ("/home/ubuntu/workspace/C/DD", args) == -1) {
            printf ("execv failed: errno: %d\n", errno);
            exit (1);
        }
        if (waitpid (D, &waitStatus, 0) == -1) {
            printf ("Error waiting child process.\n");
            exit (1);
        }
        printf ("\nPid = %d Code AA: process Pid = %d terminated\n", getpid (), D);
    }
    return 0;
}

