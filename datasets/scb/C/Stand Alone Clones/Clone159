/*
* Semantic clone benchmark
*  Source code are extracted from Stack Overflow
*  Stack overflow Question #:3478743
*  Stack Overflow answer #:3478808
*  And Stack Overflow answer#:3480017
*/
int main (void) {
    TYPE max = 1.0, min = 0.0, test;
    int i;
    for (i = 0; i < N; i++) {
        TYPE one_plus_test;
        test = (max + min) / ((TYPE) 2.0);
        one_plus_test = ((TYPE) 1.0) + test;
        if (one_plus_test == ((TYPE) 1.0)) {
            min = test;
        }
        else {
            max = test;
        }
    }
    printf ("The epsilon machine is %.50lf\n", max);
    return 0;
}

int main (void) {
    printf ("%30s: %g\n", "FLT_EPSILON", FLT_EPSILON);
    printf ("%30s: %g\n", "FLT_MIN", FLT_MIN);
    printf ("%30s: %g\n", "nextafterf(0.0, 1.0)", nextafterf (0.0, 1.0));
    printf ("%30s: %g\n", "nextafterf(1.0, 2.0)-1", (nextafterf (1.0, 2.0) - 1.0f));
    puts ("");
    printf ("%30s: %g\n", "DBL_EPSILON", DBL_EPSILON);
    printf ("%30s: %g\n", "DBL_MIN", DBL_MIN);
    printf ("%30s: %g\n", "nextafter(0.0, 1.0)", nextafter (0.0, 1.0));
    printf ("%30s: %g\n", "nextafter(1.0, 2.0)-1", (nextafter (1.0, 2.0) - 1.0));
    puts ("");
    printf ("%30s: %Lg\n", "LDBL_EPSILON", LDBL_EPSILON);
    printf ("%30s: %Lg\n", "LDBL_MIN", LDBL_MIN);
    printf ("%30s: %Lg\n", "nextafterl(0.0, 1.0)", nextafterl (0.0, 1.0));
    printf ("%30s: %Lg\n", "nextafterl(1.0, 2.0)-1", (nextafterl (1.0, 2.0) - 1.0));
    return 0;
}

