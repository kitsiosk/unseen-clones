/*
* Semantic clone benchmark
*  Source code are extracted from Stack Overflow
*  Stack overflow Question #:11961037
*  Stack Overflow answer #:11976016
*  And Stack Overflow answer#:11968806
*/
int process_expression (void) {
    int result = 0;
    token current_token = get_token ();
    if (current_token.type != OPERATOR) {
        fprintf (stderr, "ERROR: %s expecting operator\n", __func__);
        exit (1);
    }
    char operator = current_token.operator;
    current_token = get_token ();
    int operands [200];
    int operands_index = 0;
    while (current_token.type != CLOSE_PAREN && current_token.type != END_OF_EXPR) {
        if (current_token.type == NUMBER) {
            operands[operands_index] = current_token.number;
            operands_index += 1;
        }
        else if (current_token.type == OPEN_PAREN) {
            operands[operands_index] = process_expression ();
            operands_index += 1;
        }
        current_token = get_token ();
    }
    result = evaluate (operator, operands, operands_index);
    return result;
}

int process_expression (char operator, int *operands, int num_operands) {
    int result = 0;
    switch (operator) {
    case '+' :
        for (int i = 0; i < num_operands; i++) {
            result += operands[i];
        }
        break;
    case '-' :
        result = operands[0];
        for (int i = 1; i < num_operands; i++) {
            result -= operands[i];
        }
        break;
    case '*' :
        result = operands[0];
        for (int i = 1; i < num_operands; i++) {
            result *= operands[i];
        }
        break;
    case '/' :
        result = operands[0];
        for (int i = 1; i < num_operands; i++) {
            result /= operands[i];
        }
        break;
    default :
        printf ("ERROR invalid operator: %c\n", operator);
    }
    return result;
}

