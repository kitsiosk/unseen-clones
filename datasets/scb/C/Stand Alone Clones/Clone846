/*
* Semantic clone benchmark
*  Source code are extracted from Stack Overflow
*  Stack overflow Question #:25124569
*  Stack Overflow answer #:25125539
*  And Stack Overflow answer#:25125814
*/
int main () {
    double X [SIZE], Y [SIZE], incr = 0.0, h = PI / 100.0, sum = 0.0, trapz;
    int i = 0, k = 0, j = 0;
    for (i; i < SIZE; ++i) {
        X[i] = incr;
        incr += h;
    }
    for (k; k < SIZE; ++k) {
        Y[k] = sin (X[k]);
    }
    for (j; j < SIZE; ++j) {
        if (j == 0 || j == SIZE - 1)
            sum += Y[j] / 2;
        else
            sum += Y[j];
    }
    trapz = sum * h;
    printf ("Result: %f \n", trapz);
    return 0;
}

int main () {
    int a = 45;
    int b = 90;
    double h = M_PI / 180;
    double *inputData = malloc (360 * sizeof (double));
    if (inputData == NULL) {
        printf ("Error: ran out of memory!\n");
        exit (1);
    }
    for (int i = 0; i < 360; ++i)
        inputData[i] = sin (i *h);
    double value = (inputData[a] + inputData[b]) / 2.0;
    for (int index = a + 1; index < b; ++index)
        value += inputData[index];
    value *= h;
    printf ("integral from %d to %d = %f\n", a, b, value);
    double expected = 1.0 / sqrt (2);
    printf ("(expected value = %f, error = %f)\n", expected, expected - value);
    free (inputData);
}

