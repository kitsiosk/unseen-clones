/*
* Semantic clone benchmark
*  Source code are extracted from Stack Overflow
*  Stack overflow Question #:29615285
*  Stack Overflow answer #:29615992
*  And Stack Overflow answer#:29632121
*/
int main () {
    double integralSum = 0;
    int i;
    for (i = 1; i < (parts + 1); ++i) {
        integralSum = integralSum + (step * fabs (pow ((x + (step * i)), 2) + 4));
    }
    printf ("%f\n", integralSum);
    return 0;
}

int main () {
    unsigned int N;
    struct timespec t_start, t_end;
    clock_t start, end;
    srand (time (NULL));
    FILE *f = fopen ("out.txt", "w");
    if (f == NULL) {
        printf ("Could not open output\n");
        return -1;
    }
    for (N = 1000000; N < 100000000; N += 1000000) {
        fprintf (f, "%d\t", N);
        int *array = (int *) malloc (sizeof (int) * N);
        if (array == NULL) {
            printf ("Not enough space\n");
            return -1;
        }
        for (unsigned int i = 0; i < N; i++)
            array[i] = rand ();
        int max_val = 0.0;
        clock_gettime (CLOCK_MONOTONIC, & t_start);
        for (unsigned int i = 0; i < N; i++) {
            if (array[i] > max_val)
                max_val = array[i];
        }
        clock_gettime (CLOCK_MONOTONIC, & t_end);
        fprintf (f, "%lf\t", (double) (diff (t_start, t_end).tv_nsec / 1000000000.0));
        max_val = 0.0;
        clock_gettime (CLOCK_MONOTONIC, & t_start);
        for (unsigned int i = 0; i < N; i++) {
            if (array[i] > max_val)
                max_val = array[i];
        }
        clock_gettime (CLOCK_MONOTONIC, & t_end);
        fprintf (f, "%lf\n", (double) (diff (t_start, t_end).tv_nsec / 1000000000.0));
        free (array);
    }
    fclose (f);
    return 0;
}

